@layout('layouts/dashboard')

@section('content')
<div id="wallet">
  <form method="post" action="{{ route('WalletsController.create') }}">

    <div class="field">
      <div class="control">
        <label class="radio">
          <input type="radio" name="custominstance" :value="false" v-model="customInstance">
          Use the default BTCPay instance
        </label>
        <label class="radio">
          <input type="radio" name="custominstance" :value="true" v-model="customInstance">
          I have my own BTCPay server
        </label>
      </div>
    </div>

    <!--  Custom instance : true  -->
    <div v-if="customInstance">TODO</div>

    <!--  Custom instance : false  -->
    <div v-if="!customInstance">

      <div class="field">
        <label class="label">Derivation public key (XPUB)
          <button @click="authorizeVault" type="button" class="button is-text is-small">import from hardware wallet
          </button>
        </label>
        <div class="control {{flashMessages.has('errors.xpub') ? 'has-icons-right' : ''}}">
          <input class="input {{flashMessages.has('errors.xpub') ? 'is-danger' : ''}}"
                 type="text"
                 name="xpub"
                 placeholder="xpub..."
                 v-model="xpub"
                 value="{{ flashMessages.get('xpub') || '' }}"
                 :disabled="isSourceVault"
                 :readonly="isSourceVault">
          @if(flashMessages.has('errors.xpub'))
          <span class="icon is-small is-right">
            <i class="fas fa-exclamation-triangle"></i>
          </span>
          @endif
        </div>
        @if(flashMessages.has('errors.xpub'))
        <p class="help is-danger">{{flashMessages.get('errors.xpub')}}</p>
        @endif
      </div>


      <div class="card mb-6">
        <header class="card-header">
          <p class="card-header-title">
            Expert mode (if you don't know what is it, leave blank)
          </p>
          <button class="card-header-icon" aria-label="more options">
      <span class="icon">
        <i class="fas fa-angle-down" aria-hidden="true"></i>
      </span>
          </button>
        </header>
        <div class="card-content">
          <div class="content">
            <div class="columns">
              <div class="column">
                <div class="field">
                  <label class="label">Root fingerprint</label>
                  <div class="control">
                    <input class="input" type="text" name="fingerprint" placeholder="" v-model="fingerPrint"
                           :disabled="isSourceVault" :readonly="isSourceVault">
                  </div>
                </div>
              </div>
              <div class="column">
                <div class="field">
                  <label class="label">Key path</label>
                  <div class="control">
                    <input class="input" type="text" name="key_path" placeholder="" v-model="keyPath"
                           :disabled="isSourceVault" :readonly="isSourceVault">
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!--      <div class="field">-->
      <!--        <label class="label">Lightning node URI</label>-->
      <!--        <div class="control">-->
      <!--          <input class="input" type="text" name="lnuri" value="{{ flashMessages.get('lnuri') || '' }}">-->
      <!--        </div>-->
      <!--      </div>-->

      <div class="field">
        <label class="label">Confirm password</label>
        <div class="control has-icons-right">
          <input class="input {{flashMessages.has('errors.password') ? 'is-danger' : ''}}" type="password"
                 name="password">
          @if(flashMessages.has('errors.password'))
          <span class="icon is-small is-right">
            <i class="fas fa-exclamation-triangle"></i>
          </span>
          @endif
        </div>
        @if(flashMessages.has('errors.password'))
        <p class="help is-danger">{{flashMessages.get('errors.password')}}</p>
        @endif
      </div>

      <div class="field is-pulled-right">
        <div class="control">
          <button class="button is-primary" type="submit">Save</button>
        </div>
      </div>
    </div>


  </form>


  <div class="modal" :class="{ 'is-active': modalHW.isActive }">
    <div class="modal-background"></div>
    <div class="modal-card">
      <header class="modal-card-head">
        <p class="modal-card-title">Hardware wallet configuration</p>
        <button class="delete" aria-label="close" @click="modalHW.isActive = false"></button>
      </header>
      <section class="modal-card-body" v-if="modalHW.step === 'authorize-vault'">
        <div v-if="!modalHW.vaultNotDetected">Waiting for vault...</div>
        <div v-if="modalHW.vaultNotDetected">Verify your HWI software is open</div>
      </section>

      <section class="modal-card-body" v-if="modalHW.step === 'fetch-device'">
        <div v-if="!modalHW.deviceNotFound">Enumerate...</div>
        <div v-if="modalHW.deviceNotFound">Verify your hardware wallet is connected and unlocked</div>
      </section>

      <section class="modal-card-body" v-if="modalHW.step === 'select-account'">
        <div class="field">
          <label class="label">Address type @{{modalHW.addressType}}</label>
          <div class="control">
            <div class="select">
              <select v-model="modalHW.addressType">
                <option value="segwit">Segwit (Recommended, cheapest transaction fee)</option>
                <option value="segwitWrapped">Segwit wrapper (less cheap but compatible with old wallets)</option>
                <option value="legacy">Legacy (not recommended)</option>
              </select>
            </div>
          </div>
        </div>

        <div class="field">
          <label class="label">Account @{{modalHW.account}}</label>
          <div class="select">
            <select v-model="modalHW.account">
              <option value="0">0</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10">10</option>
              <option value="11">11</option>
              <option value="12">12</option>
              <option value="13">13</option>
              <option value="14">14</option>
              <option value="15">15</option>
              <option value="16">16</option>
              <option value="17">17</option>
              <option value="18">18</option>
              <option value="19">19</option>
            </select>
          </div>
        </div>
      </section>

      <section class="modal-card-body" v-if="modalHW.step === 'get-xpub'">
        Fetching public keys
      </section>

      <footer class="modal-card-foot" v-if="modalHW.step === 'authorize-vault'">
        <button class="button is-success" v-if="modalHW.vaultNotDetected" @click="authorizeVault">Retry</button>
      </footer>

      <footer class="modal-card-foot" v-if="modalHW.step === 'select-account'">
        <button class="button is-success" @click="getXPub">Next</button>
      </footer>
    </div>
  </div>


</div>
@endsection

@section('scripts')
@super
<script>
  var app = new Vue({
    el: "#wallet",
    data: {
      message: "Hello Vue!",
      customInstance: false,
      xpub: "",
      keyPath: "",
      fingerPrint: "",
      isSourceVault: false,
      modalHW: {
        isActive: false,
        step: "",
        vaultNotDetected: false,

        deviceNotFound: false,
        deviceLocked: false,

        xpub: "",
        fingerPrint: "",
        keyPath: "",
        addressType: "segwit",
        account: 0
      }
    },
    methods: {
      async authorizeVault() {
        this.modalHW.vaultNotDetected = false;
        this.modalHW.step = "authorize-vault";
        this.modalHW.isActive = true;
        try {
          const getResult = await axios.get("http://127.0.0.1:65092/hwi-bridge/v1/request-permission");
          await this.fetchDevice();
        } catch (e) {
          this.modalHW.vaultNotDetected = true;
        }
      },
      async fetchDevice() {
        this.modalHW.fetchDeviceFailed = false;
        this.modalHW.step = "fetch-device";
        try {
          const fetchDeviceResult = await axios.post("http://127.0.0.1:65092/hwi-bridge/v1", {
              "params": ["--testnet", "enumerate"]
            },
            {
              headers: {
                "Content-Type": "text/plain;charset=UTF-8"
              }
            });
          if (fetchDeviceResult.data[0].code) {
            //TODO device locked
          }

          //Device detected and unlocked
          this.modalHW.step = "select-account";
          this.modalHW.fingerPrint = fetchDeviceResult.data[0].fingerprint;

        } catch (e) {
          this.modalHW.fetchDeviceFailed = true;
        }
      },
      async getXPub() {
        this.modalHW.step = "get-xpub";
        let path = "m/[ADDRESS_TYPE]h/[NETWORK]h/[ACCOUNT]h";
        let keyPath = `[ADDRESS_TYPE]'/[NETWORK]'/[ACCOUNT]'`;
        let xpubSuffix = "";

        // Build path
        if (this.modalHW.addressType === "segwit") {
          path = path.replace("[ADDRESS_TYPE]", "84");
          keyPath = keyPath.replace("[ADDRESS_TYPE]", "84");
        } else if (this.modalHW.addressType === "segwitWrapped") {
          path = path.replace("[ADDRESS_TYPE]", "49");
          keyPath = keyPath.replace("[ADDRESS_TYPE]", "49");
          xpubSuffix = "-[p2sh]";
        } else {
          path = path.replace("[ADDRESS_TYPE]", "44");
          keyPath = keyPath.replace("[ADDRESS_TYPE]", "44");
          xpubSuffix = "-[legacy]";
        }

        if ("testnet" === "testnet") {
          path = path.replace("[NETWORK]", "1");
          keyPath = keyPath.replace("[NETWORK]", "1");
        } else {
          path = path.replace("[NETWORK]", "0");
          keyPath = keyPath.replace("[NETWORK]", "0");
        }

        path = path.replace("[ACCOUNT]", this.modalHW.account.toString());
        keyPath = keyPath.replace("[ACCOUNT]", this.modalHW.account.toString());
        this.modalHW.keyPath = keyPath;

        try {
          const fetchAccountResult = await axios.post("http://127.0.0.1:65092/hwi-bridge/v1", {
              "params": ["--testnet", "--fingerprint", this.modalHW.fingerPrint, "getxpub", path]
            },
            {
              headers: {
                "Content-Type": "text/plain;charset=UTF-8"
              }
            });
          this.xpub = `${fetchAccountResult.data.xpub}${xpubSuffix}`;
          this.fingerPrint = this.modalHW.fingerPrint;
          this.keyPath = this.modalHW.keyPath;
          this.isSourceVault = true;
          this.modalHW.isActive = false;
        } catch (e) {
          //TODO
        }

      }
    }
  });
</script>
@endsection
